import streamlit as st
from datetime import datetime
from textwrap import dedent
from agno.agent import Agent
from agno.models.google import Gemini
from agno.tools.arxiv import ArxivTools
from agno.tools.duckduckgo import DuckDuckGoTools
from fpdf import FPDF
import os
from dotenv import load_dotenv


# Streamlit UI
st.title("üîç AI-Powered Research Bot")
st.subheader("Powered by Gemini & AI Research Tools")


# Load API Key from st secrets
api_key = st.secrets["GEMINI_API_KEY"]

if not api_key:
    st.warning("API key not found! Please add your Gemini API key to a `.env` file.")
    st.stop()

# User Input for Research Topic
research_topic = st.text_input("Enter a research topic:")
if not research_topic:
    st.info("Enter a topic to fetch relevant information.")
    st.stop()

# Initialize Agent
today = datetime.now().strftime("%Y-%m-%d")

agent = Agent(
    model=Gemini(id="gemini-1.5-flash", api_key=api_key),
    tools=[ArxivTools(), DuckDuckGoTools()],
    description=dedent("""  
        You are Professional AI ASSISTANT, a distinguished AI research scientist with expertise  
        in analyzing and synthesizing complex information. Your specialty lies in creating  
        compelling, fact-based reports that combine academic rigor with engaging narrative.  

        Your writing style is:  
        - Clear and authoritative  
        - Engaging but professional  
        - Fact-focused with proper citations  
        - Accessible to educated non-specialists  
    """),
    instructions=dedent("""  
        - Fetch relevant academic research from Arxiv **and extract URLs to research papers**.  
        - Fetch relevant news articles from DuckDuckGo **and include their URLs**.  
        - Ensure every key point is backed by a **proper reference with a clickable URL**.  
        - Present findings in **markdown format** with a structured **References** section.  
        - The **References** section should list full URLs for all sources used.  
    """),
    expected_output=dedent(f"""  
    A professional research report in markdown format with proper references:

    # {{Compelling Title That Captures the Topic's Essence}}  

    ## Executive Summary  
    {{Brief overview of key findings and significance}}  

    ## Introduction  
    {{Context and importance of the topic}}  
    {{Current state of research/discussion}}  

    ## Key Research & Findings  
    ### Academic Research (Arxiv)  
    {{List key papers, findings, and citations from Arxiv with direct links to papers and also give three lines of summary of those papers}}  

    ### General News & Insights (DuckDuckGo)  
    {{Summarized key insights from web search with direct links to sources and and also give three lines of summary of those papers}}  

    ## Implications  
    {{Impact on field/society}}  
    {{Future directions}}  

    ## Key Takeaways  
    - {{Bullet point 1}}  
    - {{Bullet point 2}}  
    - {{Bullet point 3}}  

    ## References  
    - [Research Paper 1](full_arxiv_url) - Key finding/quote
    - [Research Paper 2](full_arxiv_url) - Key finding/quote
    - [Research Paper 3](full_arxiv_url) - Key finding/quote  
    - [News Article 1](full_duckduckgo_url) - Key finding/quote
    - [News Article 2](full_duckduckgo_url) - Key finding/quote
    - [News Article 3](full_duckduckgo_url) - Key finding/quote

    ---  
    Report generated by AI   
    Your Personal Assistant  
    Date: {today}  
    """),
    markdown=True,
    show_tool_calls=True,  # Allow visibility of tool calls
    add_datetime_to_instructions=True,
)

# Generate Report
if st.button("üîé Generate Research Report"):
    with st.spinner("Fetching information... ‚è≥"):
        report = agent.run(f"Generate a detailed research report on {research_topic}. Include citations and a references section with **clickable links**.")
    
    st.success("Research completed!")
    st.markdown(report.content, unsafe_allow_html=True)

    # Convert report to PDF
    def create_pdf(text):
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        for line in text.split("\n"):
            pdf.cell(200, 10, txt=line, ln=True, align='L')
        return pdf

    pdf = create_pdf(report.content)
    pdf_filename = "research_report.pdf"
    pdf.output(pdf_filename)

    # Provide download button
    with open(pdf_filename, "rb") as pdf_file:
        st.download_button(
            label="üì• Download Report as PDF",
            data=pdf_file,
            file_name=pdf_filename,
            mime="application/pdf"
        )
